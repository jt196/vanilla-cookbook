// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.sqlite"
}

model Article {
    id        String   @id @default(uuid())
    title     String
    content   String
    auth_user AuthUser @relation(fields: [userId], references: [id])
    userId    String
}

model Recipe {
    uid              String           @id @default(uuid())
    auth_user        AuthUser         @relation(fields: [userId], references: [id])
    userId           String
    rating           Float?
    photo_hash       String?
    on_favorites     Boolean?
    photo            String?
    scale            String?
    ingredients      String?
    is_pinned        Boolean?
    source           String?
    total_time       String?
    hash             String?
    description      String?
    source_url       String?
    difficulty       String?
    on_grocery_list  Boolean?
    in_trash         Boolean?
    directions       String?
    photo_url        String?
    cook_time        String?
    name             String?
    created          DateTime
    notes            String?
    photo_large      String?
    image_url        String?
    prep_time        String?
    servings         String?
    nutritional_info String?
    categories       RecipeCategory[] @relation("RecipeToRecipeCategory")
    photos           RecipePhoto[]
}

model RecipePhoto {
    id        String  @id @default(uuid())
    recipeUid String
    url       String?
    fileType  String?
    isMain    Boolean @default(false)
    recipe    Recipe  @relation(fields: [recipeUid], references: [uid], onDelete: Cascade)
}

model Category {
    uid        String           @id @default(uuid())
    userId     String // This is just a scalar field
    user       AuthUser         @relation(fields: [userId], references: [id]) // This establishes the relationship
    order_flag Int?
    parent_uid String?
    name       String?
    parent     Category?        @relation("CategoryToCategory", fields: [parent_uid], references: [uid], onDelete: Cascade)
    children   Category[]       @relation("CategoryToCategory")
    recipes    RecipeCategory[]
}

// Join table for many to many relationship between Category and Recipe
model RecipeCategory {
    recipeUid   String
    categoryUid String
    recipe      Recipe   @relation("RecipeToRecipeCategory", fields: [recipeUid], references: [uid], onDelete: Cascade)
    category    Category @relation(fields: [categoryUid], references: [uid], onDelete: Cascade)

    @@id([recipeUid, categoryUid])
}

model AuthUser {
    id           String        @id @default(uuid())
    name         String
    username     String        @unique
    email        String        @unique
    about        String
    isAdmin      Boolean
    articles     Article[]
    recipes      Recipe[]
    categories   Category[]
    auth_session AuthSession[]
    auth_key     AuthKey[]

    @@map("auth_user")
}

model AuthSession {
    id             String   @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_session")
}

model AuthKey {
    id              String   @id @unique
    hashed_password String?
    user_id         String
    primary_key     Boolean
    expires         BigInt?
    auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_key")
}
